                               OAuth 2 Token-Based Federation
                        draft-token7-oauth-token-based-federation-00
						
OBSOLETE: Please see the Federizerâ€™s GitHub repository: https://github.com/federizer/token-based-federation						
				   
Protocol Description

   A trust must be established between authorization servers AS1 and AS2.
   How this trust is established is outside the scope of this specification.
   
   The process begins with any standard OAuth2 protocol flow, where the
   client obtains AT1 from the AS1.

   The beginning of the process is standard OAuth2 flow using any legal
   OAuth2 grant type to obtain the AT1.
   
     +--------+       +-------------+
     |        |--(A)->|  Resource   |
     |        |       |   Owner     |
     |        |<-(B)--|   (RO)      |
     |        |       +-------------+
     |        |
     |        |                             +---------------+       +---------------+
     |        |--(C)----------------------->|    Primary    |       |   Federated   |
     | Client |                             | Authorization |       | Authorization |
     |        |<-(D)------------------------|     Server    |       |     Server    |
     |        |                             |     (AS1)     |       |     (AS2)     |
     |        |                             |               |       |               |
     |        |       +-------------+       |               |       |               |       +-------------+
     |        |--(E)->|  Primary    |--(F)->|               |<-(J)--|               |<-(I)--| Federated   |
     |        |       |  Resource   |       |               |       |               |       |  Resource   |
     |        |       |   Server    |<-(G)--|               |--(K)->|               |--(L)->|   Server    |
     |        |       |   (RS1)     |       +---------------+       +---------------+       |   (RS2)     |
     |        |       |             |                                                       |             |
     |        |       |             |                                                       |             |
     |        |       |             |--(H)------------------------------------------------->|             |
     |        |       |             |                                                       |             |   
     |        |       |             |<-(M)--------------------------------------------------|             |
     |        |<-(N)--|             |                                                       |             |    
     +--------+       +-------------+                                                       +-------------+


   (A)  Client requests authorization from Resource Owner

   (B)  Client receives authorization from the Resource Owner using any
      valid OAuth2 grant type

   (C)  Client requests AT1 from the AS1 by authenticating with the AS1
      and presenting the authorization grant obtained in (B)

   (D)  AS1 authenticates the Client and issues access token AT1 for use at RS1

   (E)  Client presents access token AT1 to RS1 to access a protected resource

   (F)  RS1 needs to access RS2 to fulfill this request, makes a call to
      the Token Endpoint on the AS1 using the redelegate grant_type

   (G)  AS1 validates AT1 and issues a token AT2 for use by RS1 against
      RS2, where the rights assigned to AT2 are a subset of those
      assigned to AT1

   (H)  RS1 presents AT2 to RS2 to access a protected resource

   (I)  RS2 presents AT2 on the Federated Introspection Endpoint on AS2

   (J)  AS2 validates AT2 on the Federated Introspection Endpoint and
      presents this AT2 on the Introspection Endpoint on AS1

   (K)  AS1 validates AT2 on the Introspection Endpoint and returns JSON document
      representing the meta information surrounding the token, including whether
	  this token is currently active.

   (L)  AS2 validates JSON document returned from AS1 Introspection Endpoint and
      returns the new JSON document representing the meta information from AS2.

   (M)  RS2 validates token AT2 and returns the protected resource to RS1

   (N)  Client receives protected resource from RS1, including
      information sourced from RS2

   Steps A-E and N are standard OAuth2 and OAuth2 Bearer tokens
   involving token AT1.  As such, the Client MAY make use of any OAuth2
   grant type, such as authorization_code, implicit, client_credentials,
   password or assertion.
   
   Acknowledgements

   A part of this document was originally proposed in draft-richer-oauth-chain-00, and
   hence credit for it belongs to the original A Method of Bearer Token Redelegation and
   Chaining for OAuth 2 author: J. Richer.
   